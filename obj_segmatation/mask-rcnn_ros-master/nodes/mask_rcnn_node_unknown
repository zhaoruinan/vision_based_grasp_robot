#!/usr/bin/env python
import os
import threading
import numpy as np

import cv2
from cv_bridge import CvBridge
import rospy
from sensor_msgs.msg import Image
from sensor_msgs.msg import RegionOfInterest

import IRL
import utils
import model as modellib
import visualize_capture as visualize
from mask_rcnn_ros.msg import Result


# Local path to trained weights file
ROS_HOME = os.environ.get('ROS_HOME', os.path.join(os.environ['HOME'], '.ros'))

os.environ["CUDA_VISIBLE_DEVICES"]="1"

# 6 objects
#IRL_MODEL_PATH = '/home/irobot2/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl_0030_6.h5'
#IRL_MODEL_PATH = '/home/irobot2/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl_0030_6_new.h5'
#CLASS_NAMES = ['BG', 'cell phone', 'bottle', 'gear', 'piston shaft', 'pen', 'glue']

# COCO Class names
# Index of the class in the list is its ID. For example, to get ID of
# the teddy bear class, use: CLASS_NAMES.index('teddy bear')

# 20 objects
# IRL_MODEL_PATH = '/home/irobot2/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl_0029_20.h5'
# IRL_MODEL_PATH = '/home/irobot2/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl_0030_20_new.h5'
# CLASS_NAMES = ['BG', 'cell phone', 'bottle', 'gear', 'piston shaft', 'pen', 'yellow cup', 'brown dog', 'pink pig', '(blue pig)', 'remote controller', '(remote controller)', 'brush', 'sauce bottle', 'purple cup', 'baseball', 'blue opener', 'toy car', 'glue', 'gun', '(toothpaste)', '(mouse)']

# # 28 objects
# IRL_MODEL_PATH = '/home/irobot2/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl_0002.h5'
#IRL_MODEL_PATH = '/home/irobot/catkin_ws/src/mask_rcnn_ros/models/20180810_short_iteration_without_unknown_class/mask_rcnn_irl.h5'
# # IRL_MODEL_PATH = '/home/irobot2/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl_0030_20_new.h5'
#CLASS_NAMES = ['joke_book', 'water_bottle_full', 'scissors_red', 'duckie', 'teddy_bear', 'duct_tape', 'baseball', 'dog_bowl', 'glue', 'utility_brush', 'knit_gloves', 'sippy_cup', 'glue_sticks', 'toothbrush_red', 'board_eraser', 'plastic_wine_glass', 'phillips_screwdriver', 'comestic', 'plastic_yellow_cup', 'bottle_opener', 'tooth_paste', 'water_gun', 'Listerine', 'brush', 'brown_dog', 'blue_pig', 'remote_controller', 'usb']

# 38 objects
#IRL_MODEL_PATH = '/home/irobot/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl.h5'
#CLASS_NAMES = ["joke_book", "water_bottle_full", "scissors_red", "duckie", "teddy_bear", "duct_tape", "baseball", "dog_bowl", "glue", "utility_brush", "knit_gloves", "sippy_cup", "glue_sticks", "toothbrush_red", "board_eraser", "plastic_wine_glass", "phillips_screwdriver", "comestic", "plastic_yellow_cup", "bottle_opener", "tooth_paste", "water_gun", "Listerine", "brush", "brown_dog", "blue_pig", "remote_controller", "usb", "toy_car", "scissors_black", "school_glue", "long_blue_pen", "small_spring_clamp", "stainless_steel_spoon_red_handle", "softball", "bubble_mailer","squeakin_eggs", "waste_paper_box", "BG"]


# 45 objects
#IRL_MODEL_PATH = '/home/irobot/catkin_ws/src/mask_rcnn_ros/models/20180810_short_iteration_without_unknown_class/mask_rcnn_irl.h5'
#CLASS_NAMES = ["joke_book", "water_bottle_full", "scissors_red", "duckie", "teddy_bear", "duct_tape", "baseball", "dog_bowl", "glue", "utility_brush", "knit_gloves", "sippy_cup", "glue_sticks", "toothbrush_red", "board_eraser", "plastic_wine_glass", "phillips_screwdriver", "comestic", "plastic_yellow_cup", "bottle_opener", "tooth_paste", "water_gun", "Listerine", "brush", "brown_dog", "blue_pig", "remote_controller", "usb", "toy_car", "scissors_black", "school_glue", "long_blue_pen", "small_spring_clamp", "stainless_steel_spoon_red_handle", "softball", "bubble_mailer","squeakin_eggs", "waste_paper_box", "pink_pig", "circular_wrench", "tee_shirt", "kitchen_towel", "snack_box", "shower_curtain", "plastic_white_cup", "BG"]

#unknown (46)
IRL_MODEL_PATH = '/home/irobot/catkin_ws/src/mask-rcnn_ros-master/models/mask_rcnn_unknown.h5'
CLASS_NAMES = ["joke_book", "water_bottle_full", "scissors_red", "duckie", "teddy_bear", "duct_tape", "baseball", "dog_bowl", "glue", "utility_brush", "knit_gloves", "sippy_cup", "glue_sticks", "toothbrush_red", "board_eraser", "plastic_wine_glass", "phillips_screwdriver", "comestic", "plastic_yellow_cup", "bottle_opener", "tooth_paste", "water_gun", "Listerine", "brush", "brown_dog", "blue_pig", "remote_controller", "usb", "toy_car", "scissors_black", "school_glue", "long_blue_pen", "small_spring_clamp", "stainless_steel_spoon_red_handle", "softball", "bubble_mailer","squeakin_eggs", "waste_paper_box", "pink_pig", "circular_wrench", "tee_shirt", "kitchen_towel", "snack_box", "shower_curtain", "plastic_white_cup","object", "BG"]

# 40 objects+unknown
#IRL_MODEL_PATH = '/home/irobot/catkin_ws/src/mask_rcnn_ros/models/20180827_40+unknown/mask_rcnn_irl_0030.h5'
#CLASS_NAMES= ["joke_book", "water_bottle_full", "scissors_red", "duckie", "teddy_bear", "duct_tape", "baseball", "dog_bowl", "glue", "utility_brush", "knit_gloves", "sippy_cup", "glue_sticks", "toothbrush_red", "board_eraser", "plastic_wine_glass", "phillips_screwdriver", "comestic", "plastic_yellow_cup", "tooth_paste", "water_gun", "brush", "remote_controller",  "scissors_black", "school_glue", "long_blue_pen", "small_spring_clamp", "stainless_steel_spoon_red_handle", "softball", "bubble_mailer", "squeakin_eggs", "waste_paper_box",  "circular_wrench", "tee_shirt", "kitchen_towel", "snack_box", "shower_curtain", "plastic_white_cup", "pink_pig", "unknown"]


#Robotworld
#IRL_MODEL_PATH = '/home/irobot/catkin_ws/src/mask_rcnn_ros-master/models/mask_rcnn_irl_real2.h5'
#CLASS_NAMES = ["blue_pig", "water_bottle_full", "scissors_red", "brown_dog", "opener", "duct_tape", "baseball", "dog_bowl", "glue", "utility_brush", "knit_gloves", "usb", "glue_sticks", "toothbrush_red", "board_eraser", "plastic_wine_glass", "remote_controller", "comestic", "plastic_yellow_cup", "tooth_paste","brush","water_gun", "BG"]



# # cosmetic
#IRL_MODEL_PATH = '/home/irobot/catkin_ws/src/mask_rcnn_ros/models/mask_rcnn_irl.h5'
#CLASS_NAMES = ["joke_book", "teddy_bear", "dog_bowl", "toy_car", "comestic", "BG"]

class InferenceConfig(IRL.IRLConfig):
    # Set batch size to 1 since we'll be running inference on
    # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1
    NUM_CLASSES = 1 + 46  # COCO has 80 classes

class MaskRCNNNode(object):
    def __init__(self):
        self._cv_bridge = CvBridge()

        config = InferenceConfig()
        config.display()

        self._visualization = rospy.get_param('~visualization', True)

        # Create model object in inference mode.
        self._model = modellib.MaskRCNN(mode="inference", model_dir="",
                                        config=config)
        # Load weights trained on MS-COCO
        model_path = rospy.get_param('~model_path', IRL_MODEL_PATH)
        # Download COCO trained weights from Releases if needed
        if model_path == IRL_MODEL_PATH and not os.path.exists(IRL_MODEL_PATH):
            utils.download_trained_weights(IRL_MODEL_PATH)

        self._model.load_weights(model_path, by_name=True)

        self._class_names = rospy.get_param('~class_names', CLASS_NAMES)

        self._last_msg = None
        self._msg_lock = threading.Lock()
        self._class_colors = visualize.random_colors(len(CLASS_NAMES))

        self._publish_rate = rospy.get_param('~publish_rate', 100)

    def run(self):
        self._result_pub = rospy.Publisher('~result', Result, queue_size=1)
        vis_pub = rospy.Publisher('~visualization', Image, queue_size=1)
        crop_pub = []
        crop_pub.append(rospy.Publisher('~crop1', Image, queue_size=1))
        crop_pub.append(rospy.Publisher('~crop2', Image, queue_size=1))
        crop_pub.append(rospy.Publisher('~crop3', Image, queue_size=1))
        crop_pub.append(rospy.Publisher('~crop4', Image, queue_size=1))
        crop_pub.append(rospy.Publisher('~crop5', Image, queue_size=1))
        crop_pub.append(rospy.Publisher('~crop6', Image, queue_size=1))
        # crop_pub2 = rospy.Publisher('~crop2', Image, queue_size=1)
        # crop_pub3 = rospy.Publisher('~crop3', Image, queue_size=1)
        # crop_pub4 = rospy.Publisher('~crop4', Image, queue_size=1)
        # crop_pub5 = rospy.Publisher('~crop5', Image, queue_size=1)
        # crop_pub6 = rospy.Publisher('~crop6', Image, queue_size=1)
        rospy.Subscriber('~input', Image,
                         self._image_callback, queue_size=1)

        rate = rospy.Rate(self._publish_rate)
        while not rospy.is_shutdown():
            if self._msg_lock.acquire(False):
                msg = self._last_msg
                self._last_msg = None
                self._msg_lock.release()
            else:
                rate.sleep()
                continue

            if msg is not None:
                np_image = self._cv_bridge.imgmsg_to_cv2(msg, 'bgr8')


                # print np_imae
                # Run detection
                results = self._model.detect([np_image], verbose=0)
                result = results[0]
                print type(result['masks'])
                # abc =result['masks'][:,:,0]
                # abc = 255*abc
                # cv2.imwrite('/home/irobot2/abc.png',abc)
                result_msg = self._build_result_msg(msg, result)
                # append RGB image to result_msg
                # result_msg.rgb_img = msg

                self._result_pub.publish(result_msg)

                # Visualize results
                if self._visualization:
                    cv_result, crop_list = self._visualize_cv(result, np_image)
                    image_msg = self._cv_bridge.cv2_to_imgmsg(cv_result, 'bgr8')
                    try:
                        for i in range(6):
                            crop_msg = self._cv_bridge.cv2_to_imgmsg(crop_list[i],'bgra8')
                            crop_pub[i].publish(crop_msg)
                    except:
                        print("...")
                    vis_pub.publish(image_msg)
                    
            # rospy.sleep(3)
            rate.sleep()

    def _build_result_msg(self, msg, result):
        result_msg = Result()
        result_msg.header = msg.header
        for i, (y1, x1, y2, x2) in enumerate(result['rois']):
            box = RegionOfInterest()
            box.x_offset = np.asscalar(x1)
            box.y_offset = np.asscalar(y1)
            box.height = np.asscalar(y2 - y1)
            box.width = np.asscalar(x2 - x1)
            result_msg.boxes.append(box)

            class_id = result['class_ids'][i]
            result_msg.class_ids.append(class_id)

            class_name = self._class_names[class_id]
            result_msg.class_names.append(class_name)

            score = result['scores'][i]
            result_msg.scores.append(score)

            mask = Image()
            mask.header = msg.header
            mask.height = result['masks'].shape[0]
            mask.width = result['masks'].shape[1]
            mask.encoding = "mono8"
            mask.is_bigendian = False
            mask.step = mask.width
            mask.data = (result['masks'][:, :, i]).tobytes()
            result_msg.masks.append(mask)
        return result_msg

    def _visualize(self, result, image):
        from matplotlib.backends.backend_agg import FigureCanvasAgg
        from matplotlib.figure import Figure

        fig = Figure()
        canvas = FigureCanvasAgg(fig)
        axes = fig.gca()
        visualize.display_instances(image, result['rois'], result['masks'],
                                    result['class_ids'], CLASS_NAMES,
                                    result['scores'], ax=axes,
                                    class_colors=self._class_colors)
        fig.tight_layout()
        canvas.draw()
        result = np.fromstring(canvas.tostring_rgb(), dtype='uint8')

        _, _, w, h = fig.bbox.bounds
        result = result.reshape((int(h), int(w), 3))
        return result

    def _visualize_cv(self, result, image):

        image, cropped_img = visualize.display_instances_cv(image, result['rois'], result['masks'],
                                               result['class_ids'], CLASS_NAMES,
                                               result['scores'],
                                               class_colors=self._class_colors)

        return image, cropped_img

    def _image_callback(self, msg):
        rospy.logdebug("Get an image")
        if self._msg_lock.acquire(False):
            self._last_msg = msg
            self._msg_lock.release()

def main():
    rospy.init_node('mask_rcnn')

    node = MaskRCNNNode()
    node.run()


if __name__ == '__main__':
    main()
